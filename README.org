#+TITLE: Competitive Companion for Emacs

Simple Emacs integration with [[https://github.com/jmerle/competitive-companion][competitive companion]]. /Still a work in progress/.

** Features

- Automatically download all task's sample test cases.
- Generate task's implementation file with user's template.
- Run program against all test cases, see wrong answers in pop-up (help) buffer.

** Planned features

- [ ] Support more veredicts (TLE, MLE, RTE).
- [ ] Add/edit/run test cases directly in results buffer.
- [ ] Automatic submission (offload to another software most probably)
- [ ] Customization of supported languages.
- [ ] Choosing the implementation language.
- [ ] Commands for creating contest folder, changing contests, etc.

** Non planned features

- Compilation :: Emacs has a bunch of solutions for compilation already (~M-x compile~ for example)
- Complex templating :: Use specific templating solutions for that.
- Mouse friendly interface :: Why reach for the mouse during a contest? ðŸ¤¨

** Use instructions

*** First time

1. Download the [[https://github.com/jmerle/competitive-companion][competitive companion browser extension]] for your favorite (and supported) browser.
2. Add the value of ~competitive-companion-server-port~ (=10050= by default) to /Custom ports/ in the extension's preferences menu.
3. Set the following /custom/ variables to your liking:
   - ~competitive-companion-task-major-mode~ :: major mode used by task implementations, this is used to automatically determine its extension.
   - ~competitive-companion-task-template-file~ :: the user's template file, this is automatically inserted in generated task files.

*** During contest

1. Make a folder for the contest (doing this automatically is not currently supported) and open it with ~M-x dired~.
2. Turn on ~competitive-companion-mode~. This automatically selects the current folder as the contest's folder and starts the connection with the browser extension.
3. Open a task page in your browser and click the extension button. The task's implementation file is automatically generated in the contest's folder and test cases are downloaded to temporary files.
4. Code!
5. After compiling your program, run it against all test cases with ~M-x competitive-companion-run-tests~.
6. Get that AC!

*** Observations

- If a file with task's letter (in capital case) already exists in the contest folder, selecting that task's page with the browser extension only downloads the test cases.
- You need to run ~M-x competitive-companion-run-tests~ while inside the task implementation file's buffer. This helps ~competitive-companion.el~ determine which test cases it should run. You can, however, have multiple binaries (one standard and one compiled with a stress test flag, for example) for the same task and choose which one to run against the test cases.
